commands and their meaning
    npm init -y : start a application to work.

TERMINOLOGOIES

PACKAGE : Package is a reusable code that is written by someone and we can use it.

Package.json : This file contains the name of the dependencies of the app without which the app can't run and some other basic information.

Package-lock.json : This file contains the detailed description of the details contined by Package.json.





git init : to initialize an application from node package manager.
Whenever and async method is completed it returns a promise.

Data Modelling

Schema() : it is a method in mongoose that takes an object 
to create models there is three steps

first: import the mongoose
    import mongoose from "mongoose"

second: create Schema
    const userSchema = new mongoose.Schema({})

third: export the Schema
    export const User(first letter should be capital) = mongoose.model("User", userSchema)

    here model() method it takes two parameters 
        - What model to make (In string format) "When this is passed to the database it is saved in lowercase with s at the end"
        - on which base to make
    

Connecting database
    - Go to mongodb atlas
    - Create a database
    - select a plan or create a cluster
    - add IP address for the database access
    - 


app.use() is used whenever we are using middlewares and to do some connfiguration settings.

MIDDLEWARES : Middlewares are of three types and any of these Middlewares runs for every route.

Built in Middlewares:
app.use(express.json())
app.use(express.urlencoded({ extended: true}))

files that are needed to show on frontend and also which is static for this we use a Middleware and paas the folder name to in which that files are.
app.use(express.static("public")) 

KEY POINTS

http package : This package is required to create a server.
createServer() method return an instance of the server. this method taked an callback that accepts two parameters req and res.

EXPRESS : express is a toolbox to create a server.

We have to set the 'view engine' to render the html and html can be renderd by "ejs"

to start server continuosly
npx nodemon app.js

if we create all the routes in a same file it would be clutered so for that we makes routes/user.routes.js to separate the routes which is related to or created for user.

after creating a route if we want to use it then first we need to export it. (module.exports = router)

For encrypting data before saving in DB we use an npm bcrypt and to perform it exactly before saving we use pre middleware functions (Pre Hooks)

JWT is bearer token




Controller to register user
    - get user details from frontend
    - validation - not empty
    - check if user already exist username, email
    - check for images check for avatar
    - upload them to cloudinary, avatar
    - create user object - create entry in db
    - remove password and refresh token field from from response
    - check for user creation
    - return response


